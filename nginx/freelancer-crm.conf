
server {
    listen 80;
    server_name timetracking.techlinx.se;

    # Enable detailed debug logging
    error_log /var/log/nginx/freelancer-crm-error.log debug;
    access_log /var/log/nginx/freelancer-crm-access.log;

    # Root directory where your built frontend files are located
    root /var/www/html/freelancer-crm;
    index index.html;

    # Handle frontend routes for SPA
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # Handle ALL auth requests to make sure nothing is missed
    location ~ ^/auth/ {
        # Debug this path
        add_header X-Debug-Path "auth_path" always;
        
        # Check if request is coming from internal network
        set $internal_network 0;
        
        if ($remote_addr ~ "^10\.") {
            set $internal_network 1;
        }
        
        if ($remote_addr ~ "^172\.(1[6-9]|2[0-9]|3[0-1])\.") {
            set $internal_network 1;
        }
        
        if ($remote_addr ~ "^192\.168\.") {
            set $internal_network 1;
        }
        
        # Only allow internal network access to supabase
        if ($internal_network = 0) {
            add_header X-Access-Denied "This Supabase instance is only accessible from the internal network" always;
            return 403;
        }
        
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Extended timeouts for auth requests
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Add CORS headers for auth requests
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey,X-Client-Info' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey,X-Client-Info';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Specifically handle token requests which might be directly accessed
    location = /auth/v1/token {
        # Debug this specific path
        add_header X-Debug-Path "token_specific" always;
        
        # Check if request is coming from internal network
        set $internal_network 0;
        
        if ($remote_addr ~ "^10\.") {
            set $internal_network 1;
        }
        
        if ($remote_addr ~ "^172\.(1[6-9]|2[0-9]|3[0-1])\.") {
            set $internal_network 1;
        }
        
        if ($remote_addr ~ "^192\.168\.") {
            set $internal_network 1;
        }
        
        # Only allow internal network access to supabase
        if ($internal_network = 0) {
            add_header X-Access-Denied "This Supabase instance is only accessible from the internal network" always;
            return 403;
        }
        
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Extended timeouts
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey,X-Client-Info' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    }

    # Handle the /supabase path prefix for the reverse proxy
    location /supabase/ {
        # Debug this path
        add_header X-Debug-Path "supabase_proxy" always;

        # Check if request is coming from internal network
        set $internal_network 0;
        
        if ($remote_addr ~ "^10\.") {
            set $internal_network 1;
        }
        
        if ($remote_addr ~ "^172\.(1[6-9]|2[0-9]|3[0-1])\.") {
            set $internal_network 1;
        }
        
        if ($remote_addr ~ "^192\.168\.") {
            set $internal_network 1;
        }
        
        # Only allow internal network access to supabase
        if ($internal_network = 0) {
            add_header X-Access-Denied "This Supabase instance is only accessible from the internal network" always;
            add_header 'Access-Control-Allow-Origin' '*' always;
            return 403;
        }
        
        # Remove the /supabase prefix when forwarding to the backend
        rewrite ^/supabase(/.*)$ $1 break;
        
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (for realtime)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Increase timeouts for slower connections
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey,X-Client-Info' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey,X-Client-Info';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Legacy support for direct API path access (without /supabase prefix)
    location ~ ^/(rest|storage|functions|realtime)/v1/ {
        # Debug this path
        add_header X-Debug-Path "api_path_legacy" always;
        
        # Check if request is coming from internal network
        set $internal_network 0;
        
        if ($remote_addr ~ "^10\.") {
            set $internal_network 1;
        }
        
        if ($remote_addr ~ "^172\.(1[6-9]|2[0-9]|3[0-1])\.") {
            set $internal_network 1;
        }
        
        if ($remote_addr ~ "^192\.168\.") {
            set $internal_network 1;
        }
        
        # Only allow internal network access to supabase
        if ($internal_network = 0) {
            add_header X-Access-Denied "This Supabase instance is only accessible from the internal network" always;
            return 403;
        }
        
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (for realtime)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Increase timeouts for slower connections
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Add CORS headers for API requests
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey,X-Client-Info' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    
    # Handle OPTIONS requests for CORS preflight
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey,X-Client-Info';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
    }
}
